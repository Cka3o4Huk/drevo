#labels Language-Russian,Phase-Requirements
=Информация для новичков=

==Программные средства==

Для работы над проектом предлагается использовать среду разработки Eclipse.

Для сборки проекта используется Apache Ant. Сайт проекта Ant: http://ant.apache.org.Там можно скачать различные версии ant'а. Обратите внимание, что скачивать нужно именно бинарную версию - на странице Download -> Binary Distributions (http://ant.apache.org/bindownload.cgi). Если не удается настроить последнюю версию, стоит попробовать чуть более ранние.
Установка Ant сводится к распаковке скачанного архива в удобный для вас каталог.


В качестве системы контроля версий используется Subversion (http://subversion.tigris.org/). Вам понадобится клиент Subversion для Windows - TortoiseSVN (http://tortoisesvn.tigris.org/). Скачать его можно на странице Downloads (http://tortoisesvn.net/downloads).
Для работы с Subversion-сервером проекта вам нужно будет использовать логин своего google-аккаунта, пароль для доступа к серверу - его можно посмотреть на странице http://code.google.com/hosting/settings, а также URL сервера: http *s*://drevo.googlecode.com/svn/.
Работа с TortoiseSVN осуществляется через добавленные им (при установке) в стандартное контекстное меню каталогов разделы.
Для создания репозитория выберите каталог и в его контекстном меню нажмите SVNCheckout. В появившемся окне нужно ввести URL Subversion-сервера, а  дальше пондобятся еще логин и пароль. В общем, считаем, что репозиторий у вас уже есть.


==Настройка==


Теперь можно настроить стартовый файл для Ant'а.
В репозитории в /branches/experimental/ находится etalon_start.cmd. По этому образцу нужно создать свой стартовый файл, например, start.cmd. Выглядеть он должен примерно так.


_set JAVA_HOME=C:\Program Files\Java\jdk1.5.0_06_

_set JDK_HOME=%JAVA_HOME%\bin_

_set JRE_HOME=%JAVA_HOME%\jre\bin_


_set ANT_HOME=D:\java\ant165_

_set PATH=%JDK_HOME%;%PATH%;%ANT_HOME%\bin_

_ant run_


Для сборки проекта start.cmd лучше вызывать из консоли - тогда вы сможете читать сообщения об ошибках в коде, если таковые будут обнаруживаться и препятствовать сборке проекта.

Запустив консоль (Пуск -> Выполнить -> cmd), перейдите в репозиторий в каталог /branches/experimental/ (в нашем примере нужно выполнить команды "d:" и "cd d:\java\repository\branches\experimental") и запустите команду start.cmd. Если все настроено правильно и в вашем репозитории находится рабочая версия проекта, через некоторое время появится окно программки, над которой вам и предстоит работать!


==Требования к форматированию кода в Eclipse==

=====кодировка файлов - UTF-8=====
=====стиль форматирования - стандартный стиль Eclipse. В принципе, вы можете оформлять код привычным вам стилем, но для приведения к общепринятому в проекте стилю жмите CTRL+SHIFT+F (Source -> Format)=====
=====импорты нужно оптимизировать: исключать лишние и добавлять нужные. Eclipse сделает это автоматически при нажатии CTRL+SHIFT+O (Source -> Organize Imports)=====



==Работа с SVN==

Вся документация по SVN, которая может вам понадобится при работе над проектом, лежит по адресу http://tortoisesvn.net/docs/release/TortoiseSVN_ru/index.html.

Перечислим основные функции SVN, которые понадобятся вам при работе над проектом.

=====SVN Update - обновление вашего локального репозитория с сервера=====
=====SVN Commit - обновление репозитория на сервере на основе вашего локального репозитория=====
=====Get Lock - блокировка файлов=====
=====Release Lock - разблокировка файлов=====

*Важно!* При выполнении Commit в поле Message оставляйте комментарий с указанием номера задачи (Issue ID) и ссылкой на ее описание.
Вот образец.
_Issue #8 (http://code.google.com/p/drevo/issues/detail?id=8)_


При выполнении Update и Commit возможно возникновение так называемых конфликтов. Это случай, когда изменения нескольких участников перекрываются, и Subversion или SVN не может самостоятельно обновить файлы. Про разрешение конфликтов можно почитать здесь: http://tortoisesvn.net/docs/release/TortoiseSVN_ru/tsvn-dug-conflicts.html.

Мёржить конфликтующие версии файлов можно и во встроенном редакторе SVN. Для этого нужно в списке обновленных файлов (в окне SVN) выбрать соответствующую команду контекстного меню для конфликтных файлов.

Важный вопрос - блокировка. Вообще, чтобы возникало меньше конфликтов (и еще меньше СЛОЖНЫХ конфликтов:), старайтесь чаще обновлять свой локальный репозиторий с сервера и коммитить на сервер свои изменения, как только они примут более-менее законченный вид. А чтобы изменения разработчиков не перекрывались, используйте блокировку файлов. Когда вы заблокируете файл на сервере, другие разработчики не смогут его обновлять, пока вы его не разблокируете, или пока срок действия блокировки не истечет. *Важно* при блокировке файлов оставлять сообщение о том, что в этом файле вы редактируете и до какого времени вы его блокируете. И, конечно, не забывайте *разблокировать заблокированные файлы*.


==Общение с товарищами по проекту==
...за исключением личных встреч и ICQ, обычно происходит через почтовую рассылку группы проекта.
Включаясь в проект, вы подписываетесь на рассылку группы. Именно поэтому вы будете получать сообщения об изменении файлов репозитория, а также все сообщения, присланные на адрес drevo@googlegroups.com. Чтобы отправить сообщение в рассылку группы, просто пишите на drevo@googlegroups.com со своего google-аккаунта.